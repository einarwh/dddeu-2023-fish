{
	"insert lambda": {
		"prefix": "lam",
		"body": [
			"\\"
		],
		"description": "Insert a lambda character"
	},

	"turnBox (outline)": {
		"prefix": "turnBox-outline",
		"body": [
			"turnBox : Box -> Box",
			"turnBox { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert turnBox function outline"
	},

	"turnBox (solution)": {
		"prefix": "cheat-turnBox",
		"body": [
			"turnBox : Box -> Box",
			"turnBox { a, b, c } =",
			"  { a = add a b",
			"  , b = c",
			"  , c = neg b }"
		],
		"description": "Insert turnBox function solution"
	},

	"flipBox (outline)": {
		"prefix": "flipBox-outline",
		"body": [
			"flipBox : Box -> Box",
			"flipBox { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert flipBox function outline"
	},

	"flipBox (solution)": {
		"prefix": "cheat-flipBox",
		"body": [
			"flipBox : Box -> Box",
			"flipBox { a, b, c } =",
			"  { a = add a b",
			"  , b = neg b",
			"  , c = c }"
		],
		"description": "Insert flipBox function solution"
	},

	"tossBox (outline)": {
		"prefix": "tossBox-outline",
		"body": [
			"tossBox : Box -> Box",
			"tossBox { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert tossBox function outline"
	},

	"tossBox (solution)": {
		"prefix": "cheat-tossBox",
		"body": [
			"tossBox : Box -> Box",
			"tossBox { a, b, c } =",
			"  { a = add a (scale 0.5 (add b c))",
			"  , b = scale 0.5 (add b c)",
			"  , c = scale 0.5 (sub c b) }"
		],
		"description": "Insert tossBox function solution"
	},

	"moveVertically (outline)": {
		"prefix": "moveVertically-outline",
		"body": [
			"moveVertically : Float -> Box -> Box",
			"moveVertically f { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert moveVertically function outline"
	},

	"moveVertically (solution)": {
		"prefix": "cheat-moveVertically",
		"body": [
			"moveVertically : Float -> Box -> Box",
			"moveVertically f { a, b, c } =",
			"  { a = add a (scale f c)",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert moveVertically function solution"
	},

	"scaleVertically (outline)": {
		"prefix": "scaleVertically-outline",
		"body": [
			"scaleVertically : Float -> Box -> Box",
			"scaleVertically f { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert scaleVertically function outline"
	},

	"scaleVertically (solution)": {
		"prefix": "cheat-scaleVertically",
		"body": [
			"scaleVertically : Float -> Box -> Box",
			"scaleVertically f { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = scale f c }"
		],
		"description": "Insert scaleVertically function solution"
	},

	"splitVertically (outline)": {
		"prefix": "splitVertically-outline",
		"body": [
			"splitVertically : Float -> Box -> (Box, Box)",
			"splitVertically f box = (box, box)"
		],
		"description": "Insert splitVertically function outline"
	},

	"splitVertically (solution)": {
		"prefix": "cheat-splitVertically",
		"body": [
			"splitVertically : Float -> Box -> (Box, Box)",
			"splitVertically f box =",
			"  let",
			"    top = box |> moveVertically (1 - f) |> scaleVertically f",
			"    bot = box |> scaleVertically (1 - f)",
			"  in",
			"    (top, bot)"
		],
		"description": "Insert splitVertically function solution"
	},

	"moveHorizontally (outline)": {
		"prefix": "moveHorizontally-outline",
		"body": [
			"moveHorizontally : Float -> Box -> Box",
			"moveHorizontally f { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert moveHorizontally function outline"
	},

	"moveHorizontally (solution)": {
		"prefix": "cheat-moveHorizontally",
		"body": [
			"moveHorizontally : Float -> Box -> Box",
			"moveHorizontally f { a, b, c } =",
			"  { a = add a (scale f b)",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert moveHorizontally function solution"
	},

	"scaleHorizontally (outline)": {
		"prefix": "scaleHorizontally-outline",
		"body": [
			"scaleHorizontally : Float -> Box -> Box",
			"scaleHorizontally f { a, b, c } =",
			"  { a = a",
			"  , b = b",
			"  , c = c }"
		],
		"description": "Insert scaleHorizontally function outline"
	},

	"scaleHorizontally (solution)": {
		"prefix": "cheat-scaleHorizontally",
		"body": [
			"scaleHorizontally : Float -> Box -> Box",
			"scaleHorizontally f { a, b, c } =",
			"  { a = a",
			"  , b = scale f b",
			"  , c = c }"
		],
		"description": "Insert scaleHorizontally function solution"
	},

	"splitHorizontally (outline)": {
		"prefix": "splitHorizontally-outline",
		"body": [
			"splitHorizontally : Float -> Box -> (Box, Box)",
			"splitHorizontally f box = (box, box)"
		],
		"description": "Insert splitHorizontally function outline"
	},

	"splitHorizontally (solution)": {
		"prefix": "cheat-splitHorizontally",
		"body": [
			"splitHorizontally : Float -> Box -> (Box, Box)",
			"splitHorizontally f box =",
			"  let",
			"    left = box |> scaleHorizontally f",
			"    right = box |> moveHorizontally f |> scaleHorizontally (1 - f)",
			"  in",
			"    (left, right)"
		],
		"description": "Insert splitHorizontally function solution"
	},

	"turn (outline)": {
		"prefix": "turn-outline",
		"body": [
			"turn : Picture -> Picture",
			"turn p = blank"
		],
		"description": "Insert turn function outline"
	},

	"turn (solution)": {
		"prefix": "cheat-turn",
		"body": [
			"turn : Picture -> Picture",
			"turn p = turnBox >> p"
		],
		"description": "Insert turn function solution"
	},

	"flip (outline)": {
		"prefix": "flip-outline",
		"body": [
			"flip : Picture -> Picture",
			"flip p = blank"
		],
		"description": "Insert flip function outline"
	},

	"flip (solution)": {
		"prefix": "cheat-flip",
		"body": [
			"flip : Picture -> Picture",
			"flip p = flipBox >> p"
		],
		"description": "Insert flip function solution"
	},	

	"toss (outline)": {
		"prefix": "toss-outline",
		"body": [
			"toss : Picture -> Picture",
			"toss p = blank"
		],
		"description": "Insert toss function outline"
	},

	"toss (solution)": {
		"prefix": "cheat-toss",
		"body": [
			"toss : Picture -> Picture",
			"toss p = tossBox >> p"
		],
		"description": "Insert toss function solution"
	},	

	"aboveRatio (outline)": {
		"prefix": "aboveRatio-outline",
		"body": [
			"aboveRatio : Int -> Int -> Picture -> Picture -> Picture",
			"aboveRatio m n p1 p2 = blank"
		],
		"description": "Insert aboveRatio function outline"
	},

	"aboveRatio (solution)": {
		"prefix": "cheat-aboveRatio",
		"body": [
			"aboveRatio : Int -> Int -> Picture -> Picture -> Picture",
			"aboveRatio m n p1 p2 =",
			"  \\box ->",
			"    let",
			"      f = toFloat m / toFloat (m + n)",
			"      (b1, b2) = splitVertically f box",
			"    in",
			"      (p1 b1) ++ (p2 b2)"
		],
		"description": "Insert aboveRatio function solution"
	},

	"above (outline)": {
		"prefix": "above-outline",
		"body": [
			"above : Picture -> Picture -> Picture",
			"above p1 p2 = blank"
		],
		"description": "Insert above function outline"
	},

	"above (solution)": {
		"prefix": "cheat-above",
		"body": [
			"above : Picture -> Picture -> Picture",
			"above = aboveRatio 1 1"
		],
		"description": "Insert above function solution"
	},

	"besideRatio (outline)": {
		"prefix": "besideRatio-outline",
		"body": [
			"besideRatio : Int -> Int -> Picture -> Picture -> Picture",
			"besideRatio m n p1 p2 = blank"
		],
		"description": "Insert besideRatio function outline"
	},

	"besideRatio (solution)": {
		"prefix": "cheat-besideRatio",
		"body": [
			"besideRatio : Int -> Int -> Picture -> Picture -> Picture",
			"besideRatio m n p1 p2 =",
			"  \\box ->",
			"    let",
			"      f = toFloat m / toFloat (m + n)",
			"      (b1, b2) = splitHorizontally f box",
			"    in",
			"      (p1 b1) ++ (p2 b2)"
		],
		"description": "Insert besideRatio function solution"
	},

	"beside (outline)": {
		"prefix": "beside-outline",
		"body": [
			"beside : Picture -> Picture -> Picture",
			"beside p1 p2 = blank"
		],
		"description": "Insert beside function outline"
	},

	"beside (solution)": {
		"prefix": "cheat-beside",
		"body": [
			"beside : Picture -> Picture -> Picture",
			"beside = besideRatio 1 1"
		],
		"description": "Insert beside function solution"
	},

	"quartet (outline)": {
		"prefix": "quartet-outline",
		"body": [
			"quartet : Picture -> Picture -> Picture -> Picture -> Picture",
			"quartet nw ne sw se = blank"
		],
		"description": "Insert quartet function outline"
	},

	"quartet (solution)": {
		"prefix": "cheat-quartet",
		"body": [
			"quartet : Picture -> Picture -> Picture -> Picture -> Picture",
			"quartet nw ne sw se =",
			"  above (beside nw ne)",
			"        (beside sw se)"
		],
		"description": "Insert quartet function outline"
	},

	"nonet (outline)": {
		"prefix": "nonet-outline",
		"body": [
			"nonet : Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture",
			"nonet nw nm ne mw mm me sw sm se = blank"
		],
		"description": "nonet beside function outline"
	},

	"nonet (solution)": {
		"prefix": "cheat-nonet",
		"body": [
			"nonet : Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture",
			"nonet nw nm ne mw mm me sw sm se =",
			"  let",
			"    row w m e = besideRatio 1 2 w (beside m e)",
			"    col n m s = aboveRatio 1 2 n (above m s)",
			"  in",
			"    col (row nw nm ne)", 
			"        (row mw mm me)",
			"        (row sw sm se)"
		],
		"description": "Insert nonet function outline"
	},

	"over (outline)": {
		"prefix": "over-outline",
		"body": [
			"over : Picture -> Picture -> Picture",
			"over p1 p2 = blank"
		],
		"description": "Insert over function outline"
	},

	"over (solution)": {
		"prefix": "cheat-over",
		"body": [
			"over : Picture -> Picture -> Picture",
			"over p1 p2 = ",
			"  \\box -> (p1 box) ++ (p2 box)"
		],
		"description": "Insert over function solution"
	},

	"ttile (outline)": {
		"prefix": "ttile-outline",
		"body": [
			"ttile : Picture -> Picture",
			"ttile fish = blank"
		],
		"description": "Insert ttile function outline"
	},

	"ttile (solution)": {
		"prefix": "cheat-ttile",
		"body": [
			"ttile : Picture -> Picture",
			"ttile fish =",
			"  let",
			"    fishN = fish |> toss |> flip",
			"    fishE = fishN |> turn |> turn |> turn",
			"  in",
			"    fish |> over fishN |> over fishE"
		],
		"description": "Insert ttile function solution"
	},

	"utile (outline)": {
		"prefix": "utile-outline",
		"body": [
			"utile : Picture -> Picture",
			"utile fish = blank"
		],
		"description": "Insert utile function outline"
	},

	"utile (solution)": {
		"prefix": "cheat-utile",
		"body": [
			"utile : Picture -> Picture",
			"utile fish =",
			"  let",
			"    fishN = fish |> toss |> flip",
			"    fishW = fishN |> turn",
			"    fishS = fishW |> turn",
			"    fishE = fishS |> turn",
			"  in",
			"    fishN |> over fishW |> over fishS |> over fishE"
		],
		"description": "Insert utile function solution"
	},

	"side (outline)": {
		"prefix": "side-outline",
		"body": [
			"side : Int -> Picture -> Picture",
			"side n fish = blank"
		],
		"description": "Insert side function outline"
	},

	"side (solution)": {
		"prefix": "cheat-side",
		"body": [
			"side : Int -> Picture -> Picture",
			"side n fish =",
			"  if n < 1 then blank",
			"  else",
			"    let",
			"      s = side (n - 1) fish",
			"      t = ttile fish",
			"    in",
			"      quartet s s (turn t) t"
		],
		"description": "Insert side function solution"
	},

	"corner (outline)": {
		"prefix": "corner-outline",
		"body": [
			"corner : Int -> Picture -> Picture",
			"corner n fish = blank"
		],
		"description": "Insert corner function outline"
	},

	"corner (solution)": {
		"prefix": "cheat-corner",
		"body": [
			"corner : Int -> Picture -> Picture",
			"corner n fish =",
			"  if n < 1 then blank",
			"  else",
			"    let",
			"      c = corner (n - 1) fish",
			"      s = side (n - 1) fish",
			"    in",
			"      quartet c s (turn s) (utile fish)"
		],
		"description": "Insert corner function solution"
	},

	"squareLimit (outline)": {
		"prefix": "squareLimit-outline",
		"body": [
			"squareLimit : Int -> Picture -> Picture",
			"squareLimit n fish = blank"
		],
		"description": "Insert squareLimit function outline"
	},

	"squareLimit (solution)": {
		"prefix": "cheat-squareLimit",
		"body": [
			"squareLimit : Int -> Picture -> Picture",
			"squareLimit n fish =",
			"  let",
			"    mm = utile fish",
			"    nw = corner n fish",
			"    sw = nw |> turn",
			"    se = sw |> turn",
			"    ne = se |> turn",
			"    nm = side n fish",
			"    mw = nm |> turn",
			"    sm = mw |> turn",
			"    me = sm |> turn",
			"  in",
			"    nonet nw nm ne mw mm me sw sm se"
		],
		"description": "Insert squareLimit function solution"
	},

	"times (outline)": {
		"prefix": "times-outline",
		"body": [
			"times : Int -> (a -> a) -> (a -> a)",
			"times n fn = identity"
		],
		"description": "Insert times function solution"
	},

	"times (solution)": {
		"prefix": "cheat-times",
		"body": [
			"times : Int -> (a -> a) -> (a -> a)",
			"times n fn =",
			"  if n < 1 then identity",
			"  else fn >> times (n - 1) fn"
		],
		"description": "Insert times function solution"
	},	
	
	"sideBoxes (solution)": {
		"prefix": "cheat-sideBoxes",
		"body": [
		    "sideBoxes : Int -> Box -> List Box",
			"sideBoxes n box =",
			"  if n < 1 then [ box ]",
			"  else",
			"    let", 
			"      (top, bot) = splitVertically 0.5 box",
			"      (nw, ne) = splitHorizontally 0.5 top",
			"      (sw, se) = splitHorizontally 0.5 bot",
			"    in",
			"      sideBoxes (n - 1) nw ++ sideBoxes (n - 1) ne ++ [sw, se]"
		],
		"description": "Insert sideBoxes function solution"
	},

	"westSideBoxes (solution)": {
		"prefix": "cheat-westSideBoxes",
		"body": [
		    "westSideBoxes : Int -> Box -> List Box",
		    "westSideBoxes n box =",
			"  if n < 1 then [ box ]",
			"  else",
			"    let",
			"      (top, bot) = splitVertically 0.5 box",
			"      (nw, ne) = splitHorizontally 0.5 top",
			"      (sw, se) = splitHorizontally 0.5 bot",
			"    in",
			"      westSideBoxes (n - 1) nw ++ westSideBoxes (n - 1) sw ++ [ne, se]"
		],
		"description": "Insert westSideBoxes function solution"
	},

	"cornerBoxes (solution)": {
		"prefix": "cheat-cornerBoxes",
		"body": [
		    "cornerBoxes : Int -> Box -> List Box",
			"cornerBoxes n box =",
			"  if n < 1 then [ box ]",
			"  else",
			"    let",
			"      (top, bot) = splitVertically 0.5 box",
			"      (nw, ne) = splitHorizontally 0.5 top",
			"      (sw, se) = splitHorizontally 0.5 bot",
			"    in",
			"      cornerBoxes (n - 1) nw ++ sideBoxes (n - 1) ne ++ westSideBoxes (n - 1) sw ++ [se]"
		],
		"description": "Insert cornerBoxes function solution"
	}
}